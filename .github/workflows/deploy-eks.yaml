name: Deploy AWS - EKS

# on:
#   push:
#     branches:
#     - main

on:
  pull_request:
    branches:
    - main

env:
  REGION_DEFAULT: "us-east-1"
  CLUSTER_NAME: "processador-video-cluster"

jobs:

  publish-image:
    runs-on: ubuntu-latest

    steps:

    - name: Check out the repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }} # Checkout para a branch atual

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: dotnet restore  src/app/ProcessadorVideo/ProcessadorVideo.sln

    - name: Build the project
      run: dotnet build --no-restore --configuration Release  src/app/ProcessadorVideo/ProcessadorVideo.sln

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal  src/app/ProcessadorVideo/ProcessadorVideo.sln

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/processamento-video.api:latest .
      working-directory: src/app/ProcessadorVideo # Path to your Dockerfile

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/processamento-video.api:latest

  deploy-terraform:
    name: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ID }}
    #     aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    #     aws-region: ${{ env.REGION_DEFAULT }}

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -input=false
      working-directory: ./src/infra

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./src/infra

    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan -no-color -input=false
      continue-on-error: false
      working-directory: ./src/infra

    - name: Terraform Apply
      id: apply
      run: terraform apply -input=false -auto-approve
      working-directory: ./src/infra
  # deploy:
  #   name: Deploy AWS
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: AWS Configure
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ID }}
  #       aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #       aws-region: ${{ env.REGION_DEFAULT }}

  #   - name: Update Kube Config
  #     run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.REGION_DEFAULT }}

  #   - name: Install Helm
  #     run: |
  #       curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  #       helm version --short  # Verificar vers√£o do Helm instalada

  #   - name: Deploy with Helm
  #     run: |
  #       helm upgrade --install processador-video ./infra/processamentovideo-chart -f ./infra/values-production.yaml \
  #         --set aws.accesKey="${{ secrets.AWS_ACCESS_KEY }}"
  #         --set aws.secretKey="${{ secrets.AWS_SECRET_KEY }}"
  #         --set api.configmap.database.value="${{ secrets.DB_CONNECTION }}" \
  #         --set "forceUpdate=$(date +%s)"
